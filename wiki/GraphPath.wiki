#sidebar Sidebar
#labels Autogenerated
#summary EXPERIMENTAL: Represents a path selecting nodes from a simple graph Based on http://www.w3.org/2005/04/fresnel-info/fsl

*note:* this page is automatically generated from embedded documentation in the PHP source.

= Overview =

== Constructors ==
 * [#GraphPath GraphPath]
== Methods ==
 * [#add_error add_error]
 * [#get_errors get_errors]
 * [#has_errors has_errors]
 * [#m m]
 * [#m_andexpr m_andexpr]
 * [#m_axis m_axis]
 * [#m_booleangenerator m_booleangenerator]
 * [#m_closebracket m_closebracket]
 * [#m_compexpr m_compexpr]
 * [#m_functioncall m_functioncall]
 * [#m_literal m_literal]
 * [#m_literalgenerator m_literalgenerator]
 * [#m_locationpath m_locationpath]
 * [#m_number m_number]
 * [#m_numbergenerator m_numbergenerator]
 * [#m_oneargument m_oneargument]
 * [#m_openbracket m_openbracket]
 * [#m_operator m_operator]
 * [#m_orexpr m_orexpr]
 * [#m_slash m_slash]
 * [#m_split m_split]
 * [#m_step m_step]
 * [#m_string m_string]
 * [#m_test m_test]
 * [#m_textfunction m_textfunction]
 * [#m_unaryexpr m_unaryexpr]
 * [#match match] - Evaluate the path against a graph
 * [#to_string to_string]

= Constructor Detail =

== GraphPath ==

{{{
public GraphPath(mixed path)
}}}



= Method Detail =

== add_error ==

{{{
public void add_error(mixed err)
}}}



== get_errors ==

{{{
public void get_errors()
}}}



== has_errors ==

{{{
public void has_errors()
}}}



== m ==

{{{
public void m(mixed re, mixed v, mixed options)
}}}



== m_andexpr ==

{{{
public void m_andexpr(mixed v)
}}}



== m_axis ==

{{{
public void m_axis(mixed v)
}}}



== m_booleangenerator ==

{{{
public void m_booleangenerator(mixed v)
}}}



== m_closebracket ==

{{{
public void m_closebracket(mixed v)
}}}



== m_compexpr ==

{{{
public void m_compexpr(mixed v)
}}}



== m_functioncall ==

{{{
public void m_functioncall(mixed v)
}}}



== m_literal ==

{{{
public void m_literal(mixed v)
}}}



== m_literalgenerator ==

{{{
private void m_literalgenerator(mixed v)
}}}



== m_locationpath ==

{{{
public void m_locationpath(mixed v)
}}}



== m_number ==

{{{
public void m_number(mixed v)
}}}



== m_numbergenerator ==

{{{
public void m_numbergenerator(mixed v)
}}}



== m_oneargument ==

{{{
public void m_oneargument(mixed v)
}}}



== m_openbracket ==

{{{
public void m_openbracket(mixed v)
}}}



== m_operator ==

{{{
public void m_operator(mixed v)
}}}



== m_orexpr ==

{{{
public void m_orexpr(mixed v)
}}}



== m_slash ==

{{{
public void m_slash(mixed v)
}}}



== m_split ==

{{{
public void m_split(mixed pattern, mixed v)
}}}



== m_step ==

{{{
public void m_step(mixed v)
}}}



== m_string ==

{{{
public void m_string(mixed v)
}}}



== m_test ==

{{{
public void m_test(mixed v)
}}}



== m_textfunction ==

{{{
public void m_textfunction(mixed v)
}}}



== m_unaryexpr ==

{{{
public void m_unaryexpr(mixed v)
}}}



== match ==

{{{
public array match(SimpleGraph g, mixed trace)
}}}

Evaluate the path against a graph<dl>
<dt>Returns:</dt>
<dd>nodes that match the path</dd>
</dl>


== to_string ==

{{{
public void to_string()
}}}





Generated by [http://phpdoctor.sourceforge.net/ PHPDoctor 2RC2]
