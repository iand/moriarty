#sidebar Sidebar
#labels Autogenerated
#summary DataTable is Moriarty's implementation of the Active Record pattern for RDF data.

*note:* this page is automatically generated from embedded documentation in the PHP source.

= Overview =

DataTable is Moriarty's implementation of the Active Record pattern for RDF data. It provides a very simple way to create and run SPARQL queries.


DataTable is the class that constructs the queries. DataTableResult (in datatableresult.class.php) is a class that represents the results of a query. The interface to DataTable takes inspiration from CodeIgniter's Active Record class, adapted slightly for some RDF specifics.

DataTable uses method chaining to make the code more compact and readable. All of the following are equivalent:

<code language="php">
$dt->select('name')->from('person')->limit(5);

$dt->select('name');
$dt->from('person');
$dt->limit(5);

$dt->select('name')->limit(5);
$dt->from('person');
</code>

== Constructors ==
 * [#DataTable DataTable] - The DataTable constructor requires the URI of the Talis Platform store as its first parameter, e.g.:   $dt = new DataTable('http://api.talis.com/stores/mystore');   Optionally a Credentials object can be supplied as the second parameter.
== Methods ==
 * [#distinct distinct]
 * [#from from]
 * [#get get] - Runs the constructed query and returns the results as an instance of DataTableResult
 * [#get_data_as_graph get_data_as_graph]
 * [#get_differences get_differences]
 * [#get_insert_graph get_insert_graph]
 * [#get_sparql get_sparql]
 * [#get_update_changeset get_update_changeset]
 * [#insert insert]
 * [#limit limit]
 * [#map map] - Maps a URI to a short name.
 * [#optional optional]
 * [#order_by order_by]
 * [#select select] - Specifies the variables you want to select in your query.
 * [#set set]
 * [#set_field_defaults set_field_defaults]
 * [#update update]
 * [#where where]
 * [#where_uri where_uri]

= Constructor Detail =

== DataTable ==

{{{
public DataTable(mixed store_uri, mixed credentials, mixed request_factory)
}}}

The DataTable constructor requires the URI of the Talis Platform store as its first parameter, e.g.:

<code language="php">
$dt = new DataTable('http://api.talis.com/stores/mystore');
</code>

Optionally a Credentials object can be supplied as the second parameter.

Advanced: A third, optional, parameter allows an alternate HttpRequestFactory to be specified for when you need an alternate HTTP implementation to the default cURL-based one

= Method Detail =

== distinct ==

{{{
public void distinct()
}}}



== from ==

{{{
public void from(mixed type_list)
}}}



== get ==

{{{
public void get()
}}}

Runs the constructed query and returns the results as an instance of DataTableResult

== get_data_as_graph ==

{{{
public void get_data_as_graph(mixed s)
}}}



== get_differences ==

{{{
public void get_differences(mixed query_results)
}}}



== get_insert_graph ==

{{{
public void get_insert_graph(mixed type_list)
}}}



== get_sparql ==

{{{
public void get_sparql()
}}}



== get_update_changeset ==

{{{
public void get_update_changeset()
}}}



== insert ==

{{{
public void insert(mixed type_list)
}}}



== limit ==

{{{
public void limit(mixed value, mixed offset)
}}}



== map ==

{{{
public void map(mixed uri_or_array, mixed short_name)
}}}

Maps a URI to a short name. The first parameter can either be a URI or an associative array of uri and shortname mappings in which case the second parameter is ignored. Short names are used by other methods to refer to property and class URIs.

The following are equivalent:

<code language="php">
$dt->map('http://xmlns.com/foaf/0.1/name', 'name');
$dt->map('http://xmlns.com/foaf/0.1/nick', 'nick');
</code>

<code language="php">
$dt->map( array('http://xmlns.com/foaf/0.1/name' => 'name', 'http://xmlns.com/foaf/0.1/nick' => 'nick'));
</code>

== optional ==

{{{
public void optional(mixed field_list)
}}}



== order_by ==

{{{
public void order_by(mixed field, mixed ordering)
}}}



== select ==

{{{
public void select(mixed field_list)
}}}

Specifies the variables you want to select in your query. It takes a single parameter which is a comma separated list of field names (which must be mapped short names) or "dotted path names", explained below.

All of the following are valid:

<code language="php">
$dt->select('name');
$dt->select('name,age');
$dt->select(' name  , age');
</code>

The following code will select the foaf:names of every resource in a store:

<code language="php">
$dt = new DataTable('http://api.talis.com/stores/mystore');
$dt->map('http://xmlns.com/foaf/0.1/name', 'name');
$dt->select('name');
$dt->get();
</code>

In addition to mapped field names, DataTable supports an extended syntax for expressing traversal of the relationships in the RDF. Dotted path names are a pair of mapped names delimited by a full stop, e.g. friend.name

Both parts of a dotted path name must be mapped short names. They can be interpreted as a join between resources in the data. friend.name can be translated as "the name of the resource that is the value of the matching result's friend property". In the query resules the dotted path name is referenced by replacing the dot with an underscore, so friend.name becomes a field called friend_name

The following code will select the foaf:names of every resource in a store and the foaf:names of everyone they know:

<code language="php">
$dt = new DataTable('http://api.talis.com/stores/mystore');
$dt->map('http://xmlns.com/foaf/0.1/name', 'name');
$dt->map('http://xmlns.com/foaf/0.1/knows', 'knows');
$dt->select('name,knows.name');
$dt->get();
$res = $dt->get();
foreach ($res->result() as $row) {
   echo $row->name;
   echo $row->knows_name;
}  
</code>

== set ==

{{{
public void set(mixed field, mixed value, mixed type, mixed lang, mixed dt)
}}}



== set_field_defaults ==

{{{
public void set_field_defaults(mixed field, mixed type, mixed datatype)
}}}



== update ==

{{{
public void update()
}}}



== where ==

{{{
public void where(mixed field, mixed value)
}}}



== where_uri ==

{{{
public void where_uri(mixed field, mixed uri)
}}}





Generated by [http://phpdoctor.sourceforge.net/ PHPDoctor 2RC2]
