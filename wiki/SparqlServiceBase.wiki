#sidebar Sidebar
#labels Autogenerated
#summary Represents the base class for various sparql services.

*note:* this page is automatically generated from embedded documentation in the PHP source.

= Overview =

== Constructors ==
 * [#SparqlServiceBase SparqlServiceBase] - Create a new instance of this class
== Methods ==
 * [#ask ask] - Execute an ask sparql query
 * [#construct_to_simple_graph construct_to_simple_graph] - 
 * [#construct_to_triple_list construct_to_triple_list] - 
 * [#describe describe] - Obtain a bounded description of a given resource.
 * [#describe_to_simple_graph describe_to_simple_graph] - Obtain a bounded description of a given resource as a SimpleGraph.
 * [#describe_to_triple_list describe_to_triple_list] - 
 * [#graph graph] - Execute a graph type sparql query, i.e.
 * [#graph_to_simple_graph graph_to_simple_graph] - Execute a graph type sparql query and obtain the result as a SimpleGraph.
 * [#graph_to_triple_list graph_to_triple_list] - 
 * [#parse_ask_results parse_ask_results] - Parse the SPARQL XML results format from an ask query.
 * [#parse_select_results parse_select_results] - Parse the SPARQL XML results format into an array.
 * [#query query] - Execute an arbitrary query on the sparql service
 * [#select select] - Execute a select sparql query
 * [#select_to_array select_to_array] - Execute a select sparql query and return the results as an array.

= Constructor Detail =

== SparqlServiceBase ==

{{{
public SparqlServiceBase(string uri, <a href="../moriarty/credentials.html">Credentials</a> credentials, mixed request_factory)
}}}

Create a new instance of this class<dl>
<dt>Parameters:</dt>
<dd>uri - URI of the sparql service</dd>
<dd>credentials - the credentials to use for authenticated requests (optional)</dd>
</dl>


= Method Detail =

== ask ==

{{{
public HttpResponse ask(string query)
}}}

Execute an ask sparql query<dl>
<dt>Parameters:</dt>
<dd>query - the ask query to execute</dd>
</dl>


== construct_to_simple_graph ==

{{{
public void construct_to_simple_graph(mixed query)
}}}

<dl>
<dt>Deprecated:</dt>
<dd>use graph_to_simple_graph</dd>
</dl>


== construct_to_triple_list ==

{{{
public void construct_to_triple_list(mixed query)
}}}

<dl>
<dt>Deprecated:</dt>
<dd>triple lists are deprecated</dd>
</dl>


== describe ==

{{{
public HttpResponse describe(mixed uri, string type, mixed output)
}}}

Obtain a bounded description of a given resource. Various types of description are supported:  <ul>  <li><em>cbd</em> - concise bounded description</li>  <li><em>scbd</em> - symmetric bounded description</li>  <li><em>lcbd</em> - labelled bounded description</li>  <li><em>slcbd</em> - symmetric labelled bounded description</li>  </ul>  See http://n2.talis.com/wiki/Bounded_Descriptions_in_RDF for more information on these types of description  Only cbd type is supported for arrays of URIs<dl>
<dt>Parameters:</dt>
<dd>uri - the URI of the resource to be described or an array of URIs</dd>
<dd>type - the type of bounded description to be obtained (optional)</dd>
</dl>


== describe_to_simple_graph ==

{{{
public SimpleGraph describe_to_simple_graph(mixed uri, mixed type)
}}}

Obtain a bounded description of a given resource as a SimpleGraph. An empty SimpleGraph is returned if any HTTP errors occur.<dl>
<dt>Parameters:</dt>
<dd>uri - the URI of the resource to be described or an array of URIs</dd>
</dl>


== describe_to_triple_list ==

{{{
public void describe_to_triple_list(mixed uri)
}}}

<dl>
<dt>Deprecated:</dt>
<dd>triple lists are deprecated</dd>
</dl>


== graph ==

{{{
public HttpResponse graph(string query, mixed output)
}}}

Execute a graph type sparql query, i.e. a describe or a construct<dl>
<dt>Parameters:</dt>
<dd>query - the describe or construct query to execute</dd>
</dl>


== graph_to_simple_graph ==

{{{
public SimpleGraph graph_to_simple_graph(string query)
}}}

Execute a graph type sparql query and obtain the result as a SimpleGraph. An empty SimpleGraph is returned if any HTTP errors occur.<dl>
<dt>Parameters:</dt>
<dd>query - the describe or construct query to execute</dd>
</dl>


== graph_to_triple_list ==

{{{
public void graph_to_triple_list(mixed query)
}}}

<dl>
<dt>Deprecated:</dt>
<dd>triple lists are deprecated</dd>
</dl>


== parse_ask_results ==

{{{
public array parse_ask_results(string xml)
}}}

Parse the SPARQL XML results format from an ask query.<dl>
<dt>Parameters:</dt>
<dd>xml - the results XML to parse</dd>
<dt>Returns:</dt>
<dd>true if the query result was true, false otherwise</dd>
</dl>


== parse_select_results ==

{{{
public array parse_select_results(string xml)
}}}

Parse the SPARQL XML results format into an array. The array consist of one element per result.   Each element is an associative array where the keys correspond to the variable name and the values are  another associative array with the following keys:  <ul>  <li><em>type</em> => the type of the result binding, one of 'uri', 'literal' or 'bnode'</li>  <li><em>value</em> => the value of the result binding</li>  <li><em>lang</em> => the language code (if any) of the result binding</li>  <li><em>datatype</em> => the datatype uri (if any) of the result binding</li>  </ul>  For example: $results[2]['foo']['value'] will obtain the value of the foo variable for the third result<dl>
<dt>Parameters:</dt>
<dd>xml - the results XML to parse</dd>
</dl>


== query ==

{{{
public HttpResponse query(string query, string mime)
}}}

Execute an arbitrary query on the sparql service<dl>
<dt>Parameters:</dt>
<dd>query - the query to execute</dd>
<dd>mime - the media type of the expected response (optional, defaults to RDF/XML and SPARQL results XML)</dd>
</dl>


== select ==

{{{
public HttpResponse select(string query)
}}}

Execute a select sparql query<dl>
<dt>Parameters:</dt>
<dd>query - the select query to execute</dd>
</dl>


== select_to_array ==

{{{
public array select_to_array(string query)
}}}

Execute a select sparql query and return the results as an array. An empty array is returned if any HTTP errors occur.<dl>
<dt>Parameters:</dt>
<dd>query - the select query to execute</dd>
<dt>Returns:</dt>
<dd>parsed results in format returned by parse_select_results method</dd>
</dl>


