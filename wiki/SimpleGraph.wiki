#sidebar Sidebar
#labels Autogenerated
#summary Represents an RDF graph and provides some simple functions for traversing and manipulating it.

= Overview =

== Constructors ==
 * [#SimpleGraph SimpleGraph]
== Methods ==
 * [#add_graph add_graph] - Add the triples in the supplied graph to the current graph
 * [#add_json add_json] - Add the triples parsed from the supplied JSON to the graph
 * [#add_labelling_property add_labelling_property]
 * [#add_literal_triple add_literal_triple] - Adds a triple with a literal object to the graph
 * [#add_rdf add_rdf] - Add the triples parsed from the supplied RDF to the graph - let ARC guess the input
 * [#add_rdfxml add_rdfxml] - Add the triples parsed from the supplied RDF/XML to the graph
 * [#add_resource_triple add_resource_triple] - Adds a triple with a resource object to the graph
 * [#add_turtle add_turtle] - Add the triples parsed from the supplied Turtle to the graph
 * [#diff diff] - diff returns a simpleIndex consisting of all the statements in array1 that weren't found in any of the subsequent arrays
 * [#from_json from_json] - Replace the triples in the graph with those parsed from the supplied JSON
 * [#from_rdfxml from_rdfxml] - Replace the triples in the graph with those parsed from the supplied RDF/XML
 * [#from_turtle from_turtle] - Replace the triples in the graph with those parsed from the supplied Turtle
 * [#get_description get_description]
 * [#get_first_literal get_first_literal] - Fetch the first literal value for a given subject and predicate.
 * [#get_first_resource get_first_resource] - Fetch the first resource value for a given subject and predicate.
 * [#get_index get_index] - Get a copy of the graph's triple index
 * [#get_label get_label]
 * [#get_literal_triple_values get_literal_triple_values] - Fetch the literal values for a given subject and predicate.
 * [#get_prefix get_prefix]
 * [#get_resource_triple_values get_resource_triple_values] - Fetch the resource values for a given subject and predicate.
 * [#get_subject_properties get_subject_properties] - Fetch the properties of a given subject and predicate.
 * [#get_subject_property_values get_subject_property_values] - Fetch the values for a given subject and predicate.
 * [#get_subject_subgraph get_subject_subgraph] - Fetch a subgraph where all triples have given subject
 * [#get_subjects get_subjects] - Fetch an array of all the subjects
 * [#get_subjects_of_type get_subjects_of_type] - Fetch an array of all the subject that have and rdf type that matches that given
 * [#get_subjects_where get_subjects_where]
 * [#get_subjects_where_literal get_subjects_where_literal] - Fetch an array of all the subjects where the predicate and object match a ?s $p $o triple in the graph and the object is a literal value
 * [#get_subjects_where_resource get_subjects_where_resource] - Fetch an array of all the subjects where the predicate and object match a ?s $p $o triple in the graph and the object is a resource
 * [#get_triples get_triples] - 
 * [#has_literal_triple has_literal_triple] - Tests whether the graph contains the given triple
 * [#has_resource_triple has_resource_triple] - Tests whether the graph contains the given triple
 * [#has_triples_about has_triples_about] - Tests whether the graph contains a triple with the given subject
 * [#is_empty is_empty] - Tests whether the graph contains any triples
 * [#make_resource_array make_resource_array] - Constructs an array containing the type of the resource and its value
 * [#merge merge] - merge merges all  rdf/json-style arrays passed as parameters
 * [#qname_to_uri qname_to_uri] - Convert a QName to a URI using registered namespace prefixes
 * [#reify reify]
 * [#remove_all_triples remove_all_triples] - Clears all triples out of the graph
 * [#remove_literal_triple remove_literal_triple]
 * [#remove_property_values remove_property_values] - Removes all triples with the given subject and predicate
 * [#remove_resource_triple remove_resource_triple] - Remove a triple with a resource object from the graph
 * [#remove_triples_about remove_triples_about] - Remove all triples having the supplied subject
 * [#replace_resource replace_resource]
 * [#set_namespace_mapping set_namespace_mapping] - Map a portion of a URI to a short prefix for use when serialising the graph
 * [#subject_has_property subject_has_property] - Tests whether the graph contains a triple with the given subject and predicate
 * [#to_html to_html] - Serialise the graph to HTML
 * [#to_json to_json] - Serialise the graph to JSON
 * [#to_ntriples to_ntriples] - Serialise the graph to N-Triples
 * [#to_rdfxml to_rdfxml] - Serialise the graph to RDF/XML
 * [#to_turtle to_turtle] - Serialise the graph to Turtle
 * [#update_prefix_mappings update_prefix_mappings]
 * [#uri_to_qname uri_to_qname] - Convert a URI to a QName using registered namespace prefixes

= Constructor Detail =

== SimpleGraph ==

{{{
public SimpleGraph(mixed graph)
}}}



= Method Detail =

== add_graph ==

{{{
public void add_graph(SimpleGraph g)
}}}

Add the triples in the supplied graph to the current graph<dl>
<dt>Parameters:</dt>
<dd>g - the graph to read</dd>
</dl>


== add_json ==

{{{
public void add_json(string json)
}}}

Add the triples parsed from the supplied JSON to the graph<dl>
<dt>See Also:</dt>
<dd><a href="http://n2.talis.com/wiki/RDF_JSON_Specification">http://n2.talis.com/wiki/RDF_JSON_Specification</a></dd>
<dt>Parameters:</dt>
<dd>json - the JSON to parse</dd>
</dl>


== add_labelling_property ==

{{{
public void add_labelling_property(mixed p)
}}}



== add_literal_triple ==

{{{
public boolean add_literal_triple(string s, string p, string o, string lang, string dt)
}}}

Adds a triple with a literal object to the graph<dl>
<dt>Parameters:</dt>
<dd>s - the subject of the triple, either a URI or a blank node in the format _:name</dd>
<dd>p - the predicate of the triple as a URI</dd>
<dd>o - the object of the triple as a string</dd>
<dd>lang - the language code of the triple's object (optional)</dd>
<dd>dt - the datatype URI of the triple's object (optional)</dd>
<dt>Returns:</dt>
<dd>true if the triple was new, false if it already existed in the graph</dd>
</dl>


== add_rdf ==

{{{
public void add_rdf(string rdf, string base)
}}}

Add the triples parsed from the supplied RDF to the graph - let ARC guess the input<dl>
<dt>Parameters:</dt>
<dd>rdf - the RDF to parse</dd>
<dd>base - the base URI against which relative URIs in the RDF document will be resolved</dd>
<dt>Author:</dt>
<dd>Keith Alexander</dd>
</dl>


== add_rdfxml ==

{{{
public void add_rdfxml(string rdfxml, string base)
}}}

Add the triples parsed from the supplied RDF/XML to the graph<dl>
<dt>Parameters:</dt>
<dd>rdfxml - the RDF/XML to parse</dd>
<dd>base - the base URI against which relative URIs in the RDF/XML document will be resolved</dd>
</dl>


== add_resource_triple ==

{{{
public boolean add_resource_triple(string s, string p, string o)
}}}

Adds a triple with a resource object to the graph<dl>
<dt>Parameters:</dt>
<dd>s - the subject of the triple, either a URI or a blank node in the format _:name</dd>
<dd>p - the predicate URI of the triple</dd>
<dd>o - the object of the triple, either a URI or a blank node in the format _:name</dd>
<dt>Returns:</dt>
<dd>true if the triple was new, false if it already existed in the graph</dd>
</dl>


== add_turtle ==

{{{
public void add_turtle(string turtle, string base)
}}}

Add the triples parsed from the supplied Turtle to the graph<dl>
<dt>See Also:</dt>
<dd><a href="http://www.dajobe.org/2004/01/turtle">http://www.dajobe.org/2004/01/turtle</a></dd>
<dt>Parameters:</dt>
<dd>turtle - the Turtle to parse</dd>
<dd>base - the base URI against which relative URIs in the Turtle document will be resolved</dd>
</dl>


== diff ==

{{{
public array diff(array1, array2,)
}}}

diff returns a simpleIndex consisting of all the statements in array1 that weren't found in any of the subsequent arrays<dl>
<dt>Parameters:</dt>
<dd>array2, - [array3, ...]</dd>
<dt>Author:</dt>
<dd>Keith</dd>
</dl>


== from_json ==

{{{
public void from_json(string json)
}}}

Replace the triples in the graph with those parsed from the supplied JSON<dl>
<dt>See Also:</dt>
<dd><a href="http://n2.talis.com/wiki/RDF_JSON_Specification">http://n2.talis.com/wiki/RDF_JSON_Specification</a></dd>
<dt>Parameters:</dt>
<dd>json - the JSON to parse</dd>
</dl>


== from_rdfxml ==

{{{
public void from_rdfxml(string rdfxml, string base)
}}}

Replace the triples in the graph with those parsed from the supplied RDF/XML<dl>
<dt>Parameters:</dt>
<dd>rdfxml - the RDF/XML to parse</dd>
<dd>base - the base URI against which relative URIs in the RDF/XML document will be resolved</dd>
</dl>


== from_turtle ==

{{{
public void from_turtle(string turtle, string base)
}}}

Replace the triples in the graph with those parsed from the supplied Turtle<dl>
<dt>See Also:</dt>
<dd><a href="http://www.dajobe.org/2004/01/turtle">http://www.dajobe.org/2004/01/turtle</a></dd>
<dt>Parameters:</dt>
<dd>turtle - the Turtle to parse</dd>
<dd>base - the base URI against which relative URIs in the Turtle document will be resolved</dd>
</dl>


== get_description ==

{{{
public void get_description(mixed resource_uri)
}}}



== get_first_literal ==

{{{
public string get_first_literal(string s, string p, string default, mixed preferred_language)
}}}

Fetch the first literal value for a given subject and predicate. If there are multiple possible values then one is selected at random.<dl>
<dt>Parameters:</dt>
<dd>s - the subject to search for</dd>
<dd>p - the predicate to search for, or an array of predicates</dd>
<dd>default - a default value to use if no literal values are found</dd>
<dt>Returns:</dt>
<dd>the first literal value found or the supplied default if no values were found</dd>
</dl>


== get_first_resource ==

{{{
public string get_first_resource(string s, string p, string default)
}}}

Fetch the first resource value for a given subject and predicate. If there are multiple possible values then one is selected at random.<dl>
<dt>Parameters:</dt>
<dd>s - the subject to search for</dd>
<dd>p - the predicate to search for</dd>
<dd>default - a default value to use if no literal values are found</dd>
<dt>Returns:</dt>
<dd>the first resource value found or the supplied default if no values were found</dd>
</dl>


== get_index ==

{{{
public void get_index()
}}}

Get a copy of the graph's triple index<dl>
<dt>See Also:</dt>
<dd><a href="http://n2.talis.com/wiki/RDF_PHP_Specification">http://n2.talis.com/wiki/RDF_PHP_Specification</a></dd>
</dl>


== get_label ==

{{{
public void get_label(mixed resource_uri, mixed capitalize, mixed use_qnames)
}}}



== get_literal_triple_values ==

{{{
public array get_literal_triple_values(string s, string p)
}}}

Fetch the literal values for a given subject and predicate.<dl>
<dt>Parameters:</dt>
<dd>s - the subject to search for</dd>
<dd>p - the predicate to search for</dd>
<dt>Returns:</dt>
<dd>list of literals that are the objects of triples with the supplied subject and predicate</dd>
</dl>


== get_prefix ==

{{{
public void get_prefix(mixed ns)
}}}



== get_resource_triple_values ==

{{{
public array get_resource_triple_values(string s, string p)
}}}

Fetch the resource values for a given subject and predicate.<dl>
<dt>Parameters:</dt>
<dd>s - the subject to search for</dd>
<dd>p - the predicate to search for</dd>
<dt>Returns:</dt>
<dd>list of URIs and blank nodes that are the objects of triples with the supplied subject and predicate</dd>
</dl>


== get_subject_properties ==

{{{
public array get_subject_properties(string s, boolean distinct)
}}}

Fetch the properties of a given subject and predicate.<dl>
<dt>Parameters:</dt>
<dd>s - the subject to search for</dd>
<dd>distinct - if true then duplicate properties are included only once (optional, default is true)</dd>
<dt>Returns:</dt>
<dd>list of property URIs</dd>
</dl>


== get_subject_property_values ==

{{{
public array get_subject_property_values(string s, string p)
}}}

Fetch the values for a given subject and predicate.<dl>
<dt>Parameters:</dt>
<dd>s - the subject to search for</dd>
<dd>p - the predicate to search for</dd>
<dt>Returns:</dt>
<dd>list of values of triples with the supplied subject and predicate</dd>
</dl>


== get_subject_subgraph ==

{{{
public <a href="../moriarty/simplegraph.html">SimpleGraph</a> get_subject_subgraph(string s)
}}}

Fetch a subgraph where all triples have given subject<dl>
<dt>Parameters:</dt>
<dd>s - the subject to search for</dd>
<dt>Returns:</dt>
<dd>triples with the supplied subject</dd>
</dl>


== get_subjects ==

{{{
public array get_subjects()
}}}

Fetch an array of all the subjects

== get_subjects_of_type ==

{{{
public array get_subjects_of_type(mixed t, $t the)
}}}

Fetch an array of all the subject that have and rdf type that matches that given<dl>
<dt>Parameters:</dt>
<dd>the - type to match</dd>
</dl>


== get_subjects_where ==

{{{
private void get_subjects_where(mixed p, mixed o, mixed type)
}}}



== get_subjects_where_literal ==

{{{
public array get_subjects_where_literal(mixed p, mixed o, $o the)
}}}

Fetch an array of all the subjects where the predicate and object match a ?s $p $o triple in the graph and the object is a literal value<dl>
<dt>Parameters:</dt>
<dd>the - predicate to match</dd>
<dd>the - resource object to match</dd>
</dl>


== get_subjects_where_resource ==

{{{
public array get_subjects_where_resource(mixed p, mixed o, $o the)
}}}

Fetch an array of all the subjects where the predicate and object match a ?s $p $o triple in the graph and the object is a resource<dl>
<dt>Parameters:</dt>
<dd>the - predicate to match</dd>
<dd>the - resource object to match</dd>
</dl>


== get_triples ==

{{{
public void get_triples()
}}}

<dl>
<dt>Deprecated:</dt>
<dd>this is deprecated</dd>
</dl>


== has_literal_triple ==

{{{
public boolean has_literal_triple(string s, string p, string o, mixed lang, mixed dt)
}}}

Tests whether the graph contains the given triple<dl>
<dt>Parameters:</dt>
<dd>s - the subject of the triple, either a URI or a blank node in the format _:name</dd>
<dd>p - the predicate URI of the triple</dd>
<dd>o - the object of the triple as a literal value</dd>
<dt>Returns:</dt>
<dd>true if the triple exists in the graph, false otherwise</dd>
</dl>


== has_resource_triple ==

{{{
public boolean has_resource_triple(string s, string p, string o)
}}}

Tests whether the graph contains the given triple<dl>
<dt>Parameters:</dt>
<dd>s - the subject of the triple, either a URI or a blank node in the format _:name</dd>
<dd>p - the predicate URI of the triple</dd>
<dd>o - the object of the triple, either a URI or a blank node in the format _:name</dd>
<dt>Returns:</dt>
<dd>true if the triple exists in the graph, false otherwise</dd>
</dl>


== has_triples_about ==

{{{
public boolean has_triples_about(string s)
}}}

Tests whether the graph contains a triple with the given subject<dl>
<dt>Parameters:</dt>
<dd>s - the subject of the triple, either a URI or a blank node in the format _:name</dd>
<dt>Returns:</dt>
<dd>true if the graph contains any triples with the specified subject, false otherwise</dd>
</dl>


== is_empty ==

{{{
public boolean is_empty()
}}}

Tests whether the graph contains any triples<dl>
<dt>Returns:</dt>
<dd>true if the graph contains no triples, false otherwise</dd>
</dl>


== make_resource_array ==

{{{
public array make_resource_array(string resource)
}}}

Constructs an array containing the type of the resource and its value<dl>
<dt>Parameters:</dt>
<dd>resource - a URI or blank node identifier (prefixed with _: e.g. _:name)</dd>
<dt>Returns:</dt>
<dd>an associative array with two keys: 'type' and 'value'. Type is either bnode or uri</dd>
</dl>


== merge ==

{{{
public array merge(array1, array2,)
}}}

merge merges all  rdf/json-style arrays passed as parameters<dl>
<dt>Parameters:</dt>
<dd>array2, - [array3, ...]</dd>
<dt>Author:</dt>
<dd>Keith</dd>
</dl>


== qname_to_uri ==

{{{
public string qname_to_uri(string qname)
}}}

Convert a QName to a URI using registered namespace prefixes<dl>
<dt>Parameters:</dt>
<dd>qname - the QName to convert</dd>
<dt>Returns:</dt>
<dd>the URI corresponding to the QName if a suitable prefix exists, null otherwise</dd>
</dl>


== reify ==

{{{
public void reify(mixed resources, mixed nodeID_prefix)
}}}



== remove_all_triples ==

{{{
public void remove_all_triples()
}}}

Clears all triples out of the graph

== remove_literal_triple ==

{{{
public void remove_literal_triple(mixed s, mixed p, mixed o)
}}}



== remove_property_values ==

{{{
public void remove_property_values(string s, string p)
}}}

Removes all triples with the given subject and predicate<dl>
<dt>Parameters:</dt>
<dd>s - the subject of the triple, either a URI or a blank node in the format _:name</dd>
<dd>p - the predicate URI of the triple</dd>
</dl>


== remove_resource_triple ==

{{{
public void remove_resource_triple(string s, string p, string o)
}}}

Remove a triple with a resource object from the graph<dl>
<dt>Parameters:</dt>
<dd>s - the subject of the triple, either a URI or a blank node in the format _:name</dd>
<dd>p - the predicate URI of the triple</dd>
<dd>o - the object of the triple, either a URI or a blank node in the format _:name</dd>
</dl>


== remove_triples_about ==

{{{
public void remove_triples_about(string s)
}}}

Remove all triples having the supplied subject<dl>
<dt>Parameters:</dt>
<dd>s - the subject of the triple, either a URI or a blank node in the format _:name</dd>
</dl>


== replace_resource ==

{{{
public void replace_resource(mixed look_for, mixed replace_with)
}}}



== set_namespace_mapping ==

{{{
public void set_namespace_mapping(string prefix, string uri)
}}}

Map a portion of a URI to a short prefix for use when serialising the graph<dl>
<dt>Parameters:</dt>
<dd>prefix - the namespace prefix to associate with the URI</dd>
<dd>uri - the URI to associate with the prefix</dd>
</dl>


== subject_has_property ==

{{{
public boolean subject_has_property(string s, string p)
}}}

Tests whether the graph contains a triple with the given subject and predicate<dl>
<dt>Parameters:</dt>
<dd>s - the subject of the triple, either a URI or a blank node in the format _:name</dd>
<dd>p - the predicate URI of the triple</dd>
<dt>Returns:</dt>
<dd>true if a matching triple exists in the graph, false otherwise</dd>
</dl>


== to_html ==

{{{
public string to_html(mixed s)
}}}

Serialise the graph to HTML<dl>
<dt>Returns:</dt>
<dd>a HTML version of the graph</dd>
</dl>


== to_json ==

{{{
public string to_json()
}}}

Serialise the graph to JSON<dl>
<dt>See Also:</dt>
<dd><a href="http://n2.talis.com/wiki/RDF_JSON_Specification">http://n2.talis.com/wiki/RDF_JSON_Specification</a></dd>
<dt>Returns:</dt>
<dd>the JSON version of the graph</dd>
</dl>


== to_ntriples ==

{{{
public string to_ntriples()
}}}

Serialise the graph to N-Triples<dl>
<dt>See Also:</dt>
<dd><a href="http://www.w3.org/TR/rdf-testcases/#ntriples">http://www.w3.org/TR/rdf-testcases/#ntriples</a></dd>
<dt>Returns:</dt>
<dd>the N-Triples version of the graph</dd>
</dl>


== to_rdfxml ==

{{{
public string to_rdfxml()
}}}

Serialise the graph to RDF/XML<dl>
<dt>Returns:</dt>
<dd>the RDF/XML version of the graph</dd>
</dl>


== to_turtle ==

{{{
public string to_turtle()
}}}

Serialise the graph to Turtle<dl>
<dt>See Also:</dt>
<dd><a href="http://www.dajobe.org/2004/01/turtle">http://www.dajobe.org/2004/01/turtle</a></dd>
<dt>Returns:</dt>
<dd>the Turtle version of the graph</dd>
</dl>


== update_prefix_mappings ==

{{{
public void update_prefix_mappings()
}}}



== uri_to_qname ==

{{{
public string uri_to_qname(string uri)
}}}

Convert a URI to a QName using registered namespace prefixes<dl>
<dt>Parameters:</dt>
<dd>uri - the URI to convert</dd>
<dt>Returns:</dt>
<dd>the QName corresponding to the URI if a suitable prefix exists, null otherwise</dd>
</dl>


