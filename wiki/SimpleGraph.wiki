#summary Represents an RDF graph and provides some simple functions for traversing and manipulating it.

<pre class="tree"><strong>SimpleGraph</strong><br /></pre>

<hr>

<p class="signature">public  class <strong>SimpleGraph</strong></p>

<hr>

= Constructors =
 * [#SimpleGraph SimpleGraph]

= Methods =
 * [#add_graph add_graph] - Add the triples in the supplied graph to the current graph
 * [#add_json add_json] - Add the triples parsed from the supplied JSON to the graph
 * [#add_labelling_property add_labelling_property]
 * [#add_literal_triple add_literal_triple] - Adds a triple with a literal object to the graph
 * [#add_rdf add_rdf] - Add the triples parsed from the supplied RDF to the graph - let ARC guess the input
 * [#add_rdfxml add_rdfxml] - Add the triples parsed from the supplied RDF/XML to the graph
 * [#add_resource_triple add_resource_triple] - Adds a triple with a resource object to the graph
 * [#add_turtle add_turtle] - Add the triples parsed from the supplied Turtle to the graph
 * [#diff diff] - diff returns a simpleIndex consisting of all the statements in array1 that weren't found in any of the subsequent arrays
 * [#from_json from_json] - Replace the triples in the graph with those parsed from the supplied JSON
 * [#from_rdfxml from_rdfxml] - Replace the triples in the graph with those parsed from the supplied RDF/XML
 * [#from_turtle from_turtle] - Replace the triples in the graph with those parsed from the supplied Turtle
 * [#get_description get_description]
 * [#get_first_literal get_first_literal] - Fetch the first literal value for a given subject and predicate.
 * [#get_first_resource get_first_resource] - Fetch the first resource value for a given subject and predicate.
 * [#get_index get_index] - Get a copy of the graph's triple index
 * [#get_label get_label]
 * [#get_literal_triple_values get_literal_triple_values] - Fetch the literal values for a given subject and predicate.
 * [#get_prefix get_prefix]
 * [#get_resource_triple_values get_resource_triple_values] - Fetch the resource values for a given subject and predicate.
 * [#get_subject_properties get_subject_properties] - Fetch the properties of a given subject and predicate.
 * [#get_subject_property_values get_subject_property_values] - Fetch the values for a given subject and predicate.
 * [#get_subject_subgraph get_subject_subgraph] - Fetch a subgraph where all triples have given subject
 * [#get_subjects get_subjects] - Fetch an array of all the subjects
 * [#get_subjects_of_type get_subjects_of_type] - Fetch an array of all the subject that have and rdf type that matches that given
 * [#get_subjects_where get_subjects_where]
 * [#get_subjects_where_literal get_subjects_where_literal] - Fetch an array of all the subjects where the predicate and object match a ?s $p $o triple in the graph and the object is a literal value
 * [#get_subjects_where_resource get_subjects_where_resource] - Fetch an array of all the subjects where the predicate and object match a ?s $p $o triple in the graph and the object is a resource
 * [#get_triples get_triples] - 
 * [#has_literal_triple has_literal_triple] - Tests whether the graph contains the given triple
 * [#has_resource_triple has_resource_triple] - Tests whether the graph contains the given triple
 * [#has_triples_about has_triples_about] - Tests whether the graph contains a triple with the given subject
 * [#is_empty is_empty] - Tests whether the graph contains any triples
 * [#make_resource_array make_resource_array] - Constructs an array containing the type of the resource and its value
 * [#merge merge] - merge merges all  rdf/json-style arrays passed as parameters
 * [#qname_to_uri qname_to_uri] - Convert a QName to a URI using registered namespace prefixes
 * [#reify reify]
 * [#remove_all_triples remove_all_triples] - Clears all triples out of the graph
 * [#remove_literal_triple remove_literal_triple]
 * [#remove_property_values remove_property_values] - Removes all triples with the given subject and predicate
 * [#remove_resource_triple remove_resource_triple] - Remove a triple with a resource object from the graph
 * [#remove_triples_about remove_triples_about] - Remove all triples having the supplied subject
 * [#replace_resource replace_resource]
 * [#set_namespace_mapping set_namespace_mapping] - Map a portion of a URI to a short prefix for use when serialising the graph
 * [#subject_has_property subject_has_property] - Tests whether the graph contains a triple with the given subject and predicate
 * [#to_html to_html] - Serialise the graph to HTML
 * [#to_json to_json] - Serialise the graph to JSON
 * [#to_ntriples to_ntriples] - Serialise the graph to N-Triples
 * [#to_rdfxml to_rdfxml] - Serialise the graph to RDF/XML
 * [#to_turtle to_turtle] - Serialise the graph to Turtle
 * [#update_prefix_mappings update_prefix_mappings]
 * [#uri_to_qname uri_to_qname] - Convert a URI to a QName using registered namespace prefixes

== Constructor Detail ==

=== SimpleGraph ===

{{{
public SimpleGraph(mixed graph)
}}}

SimpleGraph</strong>(mixed graph)

<h2 id="detail_method">Method Detail</h2>
<h3 id="add_graph()">add_graph</h3>
<code class="signature">public  void <strong>add_graph</strong>(<a href="../moriarty/simplegraph.html">SimpleGraph</a> g)</code>
<div class="details">
Add the triples in the supplied graph to the current graph<dl>
<dt>Parameters:</dt>
<dd>g - the graph to read</dd>
</dl>
</div>

<hr>

<h3 id="add_json()">add_json</h3>
<code class="signature">public  void <strong>add_json</strong>(string json)</code>
<div class="details">
Add the triples parsed from the supplied JSON to the graph<dl>
<dt>See Also:</dt>
<dd><a href="http://n2.talis.com/wiki/RDF_JSON_Specification">http://n2.talis.com/wiki/RDF_JSON_Specification</a></dd>
<dt>Parameters:</dt>
<dd>json - the JSON to parse</dd>
</dl>
</div>

<hr>

<h3 id="add_labelling_property()">add_labelling_property</h3>
<code class="signature">public  void <strong>add_labelling_property</strong>(mixed p)</code>
<div class="details">
</div>

<hr>

<h3 id="add_literal_triple()">add_literal_triple</h3>
<code class="signature">public  boolean <strong>add_literal_triple</strong>(string s, string p, string o, string lang, string dt)</code>
<div class="details">
Adds a triple with a literal object to the graph<dl>
<dt>Parameters:</dt>
<dd>s - the subject of the triple, either a URI or a blank node in the format _:name</dd>
<dd>p - the predicate of the triple as a URI</dd>
<dd>o - the object of the triple as a string</dd>
<dd>lang - the language code of the triple's object (optional)</dd>
<dd>dt - the datatype URI of the triple's object (optional)</dd>
<dt>Returns:</dt>
<dd>true if the triple was new, false if it already existed in the graph</dd>
</dl>
</div>

<hr>

<h3 id="add_rdf()">add_rdf</h3>
<code class="signature">public  void <strong>add_rdf</strong>(string rdf, string base)</code>
<div class="details">
Add the triples parsed from the supplied RDF to the graph - let ARC guess the input<dl>
<dt>Parameters:</dt>
<dd>rdf - the RDF to parse</dd>
<dd>base - the base URI against which relative URIs in the RDF document will be resolved</dd>
<dt>Author:</dt>
<dd>Keith Alexander</dd>
</dl>
</div>

<hr>

<h3 id="add_rdfxml()">add_rdfxml</h3>
<code class="signature">public  void <strong>add_rdfxml</strong>(string rdfxml, string base)</code>
<div class="details">
Add the triples parsed from the supplied RDF/XML to the graph<dl>
<dt>Parameters:</dt>
<dd>rdfxml - the RDF/XML to parse</dd>
<dd>base - the base URI against which relative URIs in the RDF/XML document will be resolved</dd>
</dl>
</div>

<hr>

<h3 id="add_resource_triple()">add_resource_triple</h3>
<code class="signature">public  boolean <strong>add_resource_triple</strong>(string s, string p, string o)</code>
<div class="details">
Adds a triple with a resource object to the graph<dl>
<dt>Parameters:</dt>
<dd>s - the subject of the triple, either a URI or a blank node in the format _:name</dd>
<dd>p - the predicate URI of the triple</dd>
<dd>o - the object of the triple, either a URI or a blank node in the format _:name</dd>
<dt>Returns:</dt>
<dd>true if the triple was new, false if it already existed in the graph</dd>
</dl>
</div>

<hr>

<h3 id="add_turtle()">add_turtle</h3>
<code class="signature">public  void <strong>add_turtle</strong>(string turtle, string base)</code>
<div class="details">
Add the triples parsed from the supplied Turtle to the graph<dl>
<dt>See Also:</dt>
<dd><a href="http://www.dajobe.org/2004/01/turtle">http://www.dajobe.org/2004/01/turtle</a></dd>
<dt>Parameters:</dt>
<dd>turtle - the Turtle to parse</dd>
<dd>base - the base URI against which relative URIs in the Turtle document will be resolved</dd>
</dl>
</div>

<hr>

<h3 id="diff()">diff</h3>
<code class="signature">public  array <strong>diff</strong>(array1, array2,)</code>
<div class="details">
diff returns a simpleIndex consisting of all the statements in array1 that weren't found in any of the subsequent arrays<dl>
<dt>Parameters:</dt>
<dd>array2, - [array3, ...]</dd>
<dt>Author:</dt>
<dd>Keith</dd>
</dl>
</div>

<hr>

<h3 id="from_json()">from_json</h3>
<code class="signature">public  void <strong>from_json</strong>(string json)</code>
<div class="details">
Replace the triples in the graph with those parsed from the supplied JSON<dl>
<dt>See Also:</dt>
<dd><a href="http://n2.talis.com/wiki/RDF_JSON_Specification">http://n2.talis.com/wiki/RDF_JSON_Specification</a></dd>
<dt>Parameters:</dt>
<dd>json - the JSON to parse</dd>
</dl>
</div>

<hr>

<h3 id="from_rdfxml()">from_rdfxml</h3>
<code class="signature">public  void <strong>from_rdfxml</strong>(string rdfxml, string base)</code>
<div class="details">
Replace the triples in the graph with those parsed from the supplied RDF/XML<dl>
<dt>Parameters:</dt>
<dd>rdfxml - the RDF/XML to parse</dd>
<dd>base - the base URI against which relative URIs in the RDF/XML document will be resolved</dd>
</dl>
</div>

<hr>

<h3 id="from_turtle()">from_turtle</h3>
<code class="signature">public  void <strong>from_turtle</strong>(string turtle, string base)</code>
<div class="details">
Replace the triples in the graph with those parsed from the supplied Turtle<dl>
<dt>See Also:</dt>
<dd><a href="http://www.dajobe.org/2004/01/turtle">http://www.dajobe.org/2004/01/turtle</a></dd>
<dt>Parameters:</dt>
<dd>turtle - the Turtle to parse</dd>
<dd>base - the base URI against which relative URIs in the Turtle document will be resolved</dd>
</dl>
</div>

<hr>

<h3 id="get_description()">get_description</h3>
<code class="signature">public  void <strong>get_description</strong>(mixed resource_uri)</code>
<div class="details">
</div>

<hr>

<h3 id="get_first_literal()">get_first_literal</h3>
<code class="signature">public  string <strong>get_first_literal</strong>(string s, string p, string default, mixed preferred_language)</code>
<div class="details">
Fetch the first literal value for a given subject and predicate. If there are multiple possible values then one is selected at random.<dl>
<dt>Parameters:</dt>
<dd>s - the subject to search for</dd>
<dd>p - the predicate to search for, or an array of predicates</dd>
<dd>default - a default value to use if no literal values are found</dd>
<dt>Returns:</dt>
<dd>the first literal value found or the supplied default if no values were found</dd>
</dl>
</div>

<hr>

<h3 id="get_first_resource()">get_first_resource</h3>
<code class="signature">public  string <strong>get_first_resource</strong>(string s, string p, string default)</code>
<div class="details">
Fetch the first resource value for a given subject and predicate. If there are multiple possible values then one is selected at random.<dl>
<dt>Parameters:</dt>
<dd>s - the subject to search for</dd>
<dd>p - the predicate to search for</dd>
<dd>default - a default value to use if no literal values are found</dd>
<dt>Returns:</dt>
<dd>the first resource value found or the supplied default if no values were found</dd>
</dl>
</div>

<hr>

<h3 id="get_index()">get_index</h3>
<code class="signature">public  void <strong>get_index</strong>()</code>
<div class="details">
Get a copy of the graph's triple index<dl>
<dt>See Also:</dt>
<dd><a href="http://n2.talis.com/wiki/RDF_PHP_Specification">http://n2.talis.com/wiki/RDF_PHP_Specification</a></dd>
</dl>
</div>

<hr>

<h3 id="get_label()">get_label</h3>
<code class="signature">public  void <strong>get_label</strong>(mixed resource_uri, mixed capitalize, mixed use_qnames)</code>
<div class="details">
</div>

<hr>

<h3 id="get_literal_triple_values()">get_literal_triple_values</h3>
<code class="signature">public  array <strong>get_literal_triple_values</strong>(string s, string p)</code>
<div class="details">
Fetch the literal values for a given subject and predicate.<dl>
<dt>Parameters:</dt>
<dd>s - the subject to search for</dd>
<dd>p - the predicate to search for</dd>
<dt>Returns:</dt>
<dd>list of literals that are the objects of triples with the supplied subject and predicate</dd>
</dl>
</div>

<hr>

<h3 id="get_prefix()">get_prefix</h3>
<code class="signature">public  void <strong>get_prefix</strong>(mixed ns)</code>
<div class="details">
</div>

<hr>

<h3 id="get_resource_triple_values()">get_resource_triple_values</h3>
<code class="signature">public  array <strong>get_resource_triple_values</strong>(string s, string p)</code>
<div class="details">
Fetch the resource values for a given subject and predicate.<dl>
<dt>Parameters:</dt>
<dd>s - the subject to search for</dd>
<dd>p - the predicate to search for</dd>
<dt>Returns:</dt>
<dd>list of URIs and blank nodes that are the objects of triples with the supplied subject and predicate</dd>
</dl>
</div>

<hr>

<h3 id="get_subject_properties()">get_subject_properties</h3>
<code class="signature">public  array <strong>get_subject_properties</strong>(string s, boolean distinct)</code>
<div class="details">
Fetch the properties of a given subject and predicate.<dl>
<dt>Parameters:</dt>
<dd>s - the subject to search for</dd>
<dd>distinct - if true then duplicate properties are included only once (optional, default is true)</dd>
<dt>Returns:</dt>
<dd>list of property URIs</dd>
</dl>
</div>

<hr>

<h3 id="get_subject_property_values()">get_subject_property_values</h3>
<code class="signature">public  array <strong>get_subject_property_values</strong>(string s, string p)</code>
<div class="details">
Fetch the values for a given subject and predicate.<dl>
<dt>Parameters:</dt>
<dd>s - the subject to search for</dd>
<dd>p - the predicate to search for</dd>
<dt>Returns:</dt>
<dd>list of values of triples with the supplied subject and predicate</dd>
</dl>
</div>

<hr>

<h3 id="get_subject_subgraph()">get_subject_subgraph</h3>
<code class="signature">public  <a href="../moriarty/simplegraph.html">SimpleGraph</a> <strong>get_subject_subgraph</strong>(string s)</code>
<div class="details">
Fetch a subgraph where all triples have given subject<dl>
<dt>Parameters:</dt>
<dd>s - the subject to search for</dd>
<dt>Returns:</dt>
<dd>triples with the supplied subject</dd>
</dl>
</div>

<hr>

<h3 id="get_subjects()">get_subjects</h3>
<code class="signature">public  array <strong>get_subjects</strong>()</code>
<div class="details">
Fetch an array of all the subjects</div>

<hr>

<h3 id="get_subjects_of_type()">get_subjects_of_type</h3>
<code class="signature">public  array <strong>get_subjects_of_type</strong>(mixed t, $t the)</code>
<div class="details">
Fetch an array of all the subject that have and rdf type that matches that given<dl>
<dt>Parameters:</dt>
<dd>the - type to match</dd>
</dl>
</div>

<hr>

<h3 id="get_subjects_where()">get_subjects_where</h3>
<code class="signature">private  void <strong>get_subjects_where</strong>(mixed p, mixed o, mixed type)</code>
<div class="details">
</div>

<hr>

<h3 id="get_subjects_where_literal()">get_subjects_where_literal</h3>
<code class="signature">public  array <strong>get_subjects_where_literal</strong>(mixed p, mixed o, $o the)</code>
<div class="details">
Fetch an array of all the subjects where the predicate and object match a ?s $p $o triple in the graph and the object is a literal value<dl>
<dt>Parameters:</dt>
<dd>the - predicate to match</dd>
<dd>the - resource object to match</dd>
</dl>
</div>

<hr>

<h3 id="get_subjects_where_resource()">get_subjects_where_resource</h3>
<code class="signature">public  array <strong>get_subjects_where_resource</strong>(mixed p, mixed o, $o the)</code>
<div class="details">
Fetch an array of all the subjects where the predicate and object match a ?s $p $o triple in the graph and the object is a resource<dl>
<dt>Parameters:</dt>
<dd>the - predicate to match</dd>
<dd>the - resource object to match</dd>
</dl>
</div>

<hr>

<h3 id="get_triples()">get_triples</h3>
<code class="signature">public  void <strong>get_triples</strong>()</code>
<div class="details">
<dl>
<dt>Deprecated:</dt>
<dd>this is deprecated</dd>
</dl>
</div>

<hr>

<h3 id="has_literal_triple()">has_literal_triple</h3>
<code class="signature">public  boolean <strong>has_literal_triple</strong>(string s, string p, string o, mixed lang, mixed dt)</code>
<div class="details">
Tests whether the graph contains the given triple<dl>
<dt>Parameters:</dt>
<dd>s - the subject of the triple, either a URI or a blank node in the format _:name</dd>
<dd>p - the predicate URI of the triple</dd>
<dd>o - the object of the triple as a literal value</dd>
<dt>Returns:</dt>
<dd>true if the triple exists in the graph, false otherwise</dd>
</dl>
</div>

<hr>

<h3 id="has_resource_triple()">has_resource_triple</h3>
<code class="signature">public  boolean <strong>has_resource_triple</strong>(string s, string p, string o)</code>
<div class="details">
Tests whether the graph contains the given triple<dl>
<dt>Parameters:</dt>
<dd>s - the subject of the triple, either a URI or a blank node in the format _:name</dd>
<dd>p - the predicate URI of the triple</dd>
<dd>o - the object of the triple, either a URI or a blank node in the format _:name</dd>
<dt>Returns:</dt>
<dd>true if the triple exists in the graph, false otherwise</dd>
</dl>
</div>

<hr>

<h3 id="has_triples_about()">has_triples_about</h3>
<code class="signature">public  boolean <strong>has_triples_about</strong>(string s)</code>
<div class="details">
Tests whether the graph contains a triple with the given subject<dl>
<dt>Parameters:</dt>
<dd>s - the subject of the triple, either a URI or a blank node in the format _:name</dd>
<dt>Returns:</dt>
<dd>true if the graph contains any triples with the specified subject, false otherwise</dd>
</dl>
</div>

<hr>

<h3 id="is_empty()">is_empty</h3>
<code class="signature">public  boolean <strong>is_empty</strong>()</code>
<div class="details">
Tests whether the graph contains any triples<dl>
<dt>Returns:</dt>
<dd>true if the graph contains no triples, false otherwise</dd>
</dl>
</div>

<hr>

<h3 id="make_resource_array()">make_resource_array</h3>
<code class="signature">public  array <strong>make_resource_array</strong>(string resource)</code>
<div class="details">
Constructs an array containing the type of the resource and its value<dl>
<dt>Parameters:</dt>
<dd>resource - a URI or blank node identifier (prefixed with _: e.g. _:name)</dd>
<dt>Returns:</dt>
<dd>an associative array with two keys: 'type' and 'value'. Type is either bnode or uri</dd>
</dl>
</div>

<hr>

<h3 id="merge()">merge</h3>
<code class="signature">public  array <strong>merge</strong>(array1, array2,)</code>
<div class="details">
merge merges all  rdf/json-style arrays passed as parameters<dl>
<dt>Parameters:</dt>
<dd>array2, - [array3, ...]</dd>
<dt>Author:</dt>
<dd>Keith</dd>
</dl>
</div>

<hr>

<h3 id="qname_to_uri()">qname_to_uri</h3>
<code class="signature">public  string <strong>qname_to_uri</strong>(string qname)</code>
<div class="details">
Convert a QName to a URI using registered namespace prefixes<dl>
<dt>Parameters:</dt>
<dd>qname - the QName to convert</dd>
<dt>Returns:</dt>
<dd>the URI corresponding to the QName if a suitable prefix exists, null otherwise</dd>
</dl>
</div>

<hr>

<h3 id="reify()">reify</h3>
<code class="signature">public  void <strong>reify</strong>(mixed resources, mixed nodeID_prefix)</code>
<div class="details">
</div>

<hr>

<h3 id="remove_all_triples()">remove_all_triples</h3>
<code class="signature">public  void <strong>remove_all_triples</strong>()</code>
<div class="details">
Clears all triples out of the graph</div>

<hr>

<h3 id="remove_literal_triple()">remove_literal_triple</h3>
<code class="signature">public  void <strong>remove_literal_triple</strong>(mixed s, mixed p, mixed o)</code>
<div class="details">
</div>

<hr>

<h3 id="remove_property_values()">remove_property_values</h3>
<code class="signature">public  void <strong>remove_property_values</strong>(string s, string p)</code>
<div class="details">
Removes all triples with the given subject and predicate<dl>
<dt>Parameters:</dt>
<dd>s - the subject of the triple, either a URI or a blank node in the format _:name</dd>
<dd>p - the predicate URI of the triple</dd>
</dl>
</div>

<hr>

<h3 id="remove_resource_triple()">remove_resource_triple</h3>
<code class="signature">public  void <strong>remove_resource_triple</strong>(string s, string p, string o)</code>
<div class="details">
Remove a triple with a resource object from the graph<dl>
<dt>Parameters:</dt>
<dd>s - the subject of the triple, either a URI or a blank node in the format _:name</dd>
<dd>p - the predicate URI of the triple</dd>
<dd>o - the object of the triple, either a URI or a blank node in the format _:name</dd>
</dl>
</div>

<hr>

<h3 id="remove_triples_about()">remove_triples_about</h3>
<code class="signature">public  void <strong>remove_triples_about</strong>(string s)</code>
<div class="details">
Remove all triples having the supplied subject<dl>
<dt>Parameters:</dt>
<dd>s - the subject of the triple, either a URI or a blank node in the format _:name</dd>
</dl>
</div>

<hr>

<h3 id="replace_resource()">replace_resource</h3>
<code class="signature">public  void <strong>replace_resource</strong>(mixed look_for, mixed replace_with)</code>
<div class="details">
</div>

<hr>

<h3 id="set_namespace_mapping()">set_namespace_mapping</h3>
<code class="signature">public  void <strong>set_namespace_mapping</strong>(string prefix, string uri)</code>
<div class="details">
Map a portion of a URI to a short prefix for use when serialising the graph<dl>
<dt>Parameters:</dt>
<dd>prefix - the namespace prefix to associate with the URI</dd>
<dd>uri - the URI to associate with the prefix</dd>
</dl>
</div>

<hr>

<h3 id="subject_has_property()">subject_has_property</h3>
<code class="signature">public  boolean <strong>subject_has_property</strong>(string s, string p)</code>
<div class="details">
Tests whether the graph contains a triple with the given subject and predicate<dl>
<dt>Parameters:</dt>
<dd>s - the subject of the triple, either a URI or a blank node in the format _:name</dd>
<dd>p - the predicate URI of the triple</dd>
<dt>Returns:</dt>
<dd>true if a matching triple exists in the graph, false otherwise</dd>
</dl>
</div>

<hr>

<h3 id="to_html()">to_html</h3>
<code class="signature">public  string <strong>to_html</strong>(mixed s)</code>
<div class="details">
Serialise the graph to HTML<dl>
<dt>Returns:</dt>
<dd>a HTML version of the graph</dd>
</dl>
</div>

<hr>

<h3 id="to_json()">to_json</h3>
<code class="signature">public  string <strong>to_json</strong>()</code>
<div class="details">
Serialise the graph to JSON<dl>
<dt>See Also:</dt>
<dd><a href="http://n2.talis.com/wiki/RDF_JSON_Specification">http://n2.talis.com/wiki/RDF_JSON_Specification</a></dd>
<dt>Returns:</dt>
<dd>the JSON version of the graph</dd>
</dl>
</div>

<hr>

<h3 id="to_ntriples()">to_ntriples</h3>
<code class="signature">public  string <strong>to_ntriples</strong>()</code>
<div class="details">
Serialise the graph to N-Triples<dl>
<dt>See Also:</dt>
<dd><a href="http://www.w3.org/TR/rdf-testcases/#ntriples">http://www.w3.org/TR/rdf-testcases/#ntriples</a></dd>
<dt>Returns:</dt>
<dd>the N-Triples version of the graph</dd>
</dl>
</div>

<hr>

<h3 id="to_rdfxml()">to_rdfxml</h3>
<code class="signature">public  string <strong>to_rdfxml</strong>()</code>
<div class="details">
Serialise the graph to RDF/XML<dl>
<dt>Returns:</dt>
<dd>the RDF/XML version of the graph</dd>
</dl>
</div>

<hr>

<h3 id="to_turtle()">to_turtle</h3>
<code class="signature">public  string <strong>to_turtle</strong>()</code>
<div class="details">
Serialise the graph to Turtle<dl>
<dt>See Also:</dt>
<dd><a href="http://www.dajobe.org/2004/01/turtle">http://www.dajobe.org/2004/01/turtle</a></dd>
<dt>Returns:</dt>
<dd>the Turtle version of the graph</dd>
</dl>
</div>

<hr>

<h3 id="update_prefix_mappings()">update_prefix_mappings</h3>
<code class="signature">public  void <strong>update_prefix_mappings</strong>()</code>
<div class="details">
</div>

<hr>

<h3 id="uri_to_qname()">uri_to_qname</h3>
<code class="signature">public  string <strong>uri_to_qname</strong>(string uri)</code>
<div class="details">
Convert a URI to a QName using registered namespace prefixes<dl>
<dt>Parameters:</dt>
<dd>uri - the URI to convert</dd>
<dt>Returns:</dt>
<dd>the QName corresponding to the URI if a suitable prefix exists, null otherwise</dd>
</dl>
</div>

<hr>

<div class="header">
<h1>Moriarty</h1>
<ul>
<li><a href="../overview-summary.html">Overview</a></li>
<li><a href="../moriarty/package-summary.html">Package</a></li>
<li class="active">Class</li>
<li><a href="../moriarty/package-tree.html">Tree</a></li>
<li><a href="../deprecated-list.html">Deprecated</a></li>
<li><a href="../index-all.html">Index</a></li>
</ul>
</div>

<div class="small_links">
<a href="../index.html" target="_top">Frames</a>
<a href="../SimpleGraph.wiki" target="_top">No frames</a>
</div>
<div class="small_links">
Summary: <a href="#summary_field">Field</a> | <a href="#summary_method">Method</a> | <a href="#summary_constr">Constr</a>
Detail: <a href="#detail_field">Field</a> | <a href="#detail_method">Method</a> | <a href="#summary_constr">Constr</a>
</div>
<hr>

<p id="footer">Get Moriarty from <a href=http://code.google.com/p/moriarty/>Google Code</a>. This document was generated by <a href=http://phpdoctor.sourceforge.net/>PHPDoctor: The PHP Documentation Creator</a></p>

</body>

</html>