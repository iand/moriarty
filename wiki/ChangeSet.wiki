#sidebar Sidebar
#labels Autogenerated
#summary Represents a changeset.

*note:* this page is automatically generated from embedded documentation in the PHP source.

= Overview =

Represents a changeset. Can be used to create a changeset based on the difference between two bounded descriptions. The descriptions must share the same subject URI.

<dl>
<dt>See Also:</dt>
<dd><a href="http://n2.talis.com/wiki/Changesets">http://n2.talis.com/wiki/Changesets</a></dd>
</dl>
== Constructors ==
 * [#ChangeSet ChangeSet]
== Methods ==
 * [#addT addT] - addT  adds a triple to the internal simpleIndex holding all the changesets and statements
 * [#has_changes has_changes]
 * [#toRDFXML toRDFXML]
 * [#to_rdfxml to_rdfxml] - Serialise the graph to RDF/XML

== Methods inherited from Moriarty.SimpleGraph ==

 * [SimpleGraph#add_graph add_graph]
 * [SimpleGraph#add_json add_json]
 * [SimpleGraph#add_labelling_property add_labelling_property]
 * [SimpleGraph#add_literal_triple add_literal_triple]
 * [SimpleGraph#add_rdf add_rdf]
 * [SimpleGraph#add_rdfxml add_rdfxml]
 * [SimpleGraph#add_resource_triple add_resource_triple]
 * [SimpleGraph#add_turtle add_turtle]
 * [SimpleGraph#diff diff]
 * [SimpleGraph#from_json from_json]
 * [SimpleGraph#from_rdfxml from_rdfxml]
 * [SimpleGraph#from_turtle from_turtle]
 * [SimpleGraph#get_description get_description]
 * [SimpleGraph#get_first_literal get_first_literal]
 * [SimpleGraph#get_first_resource get_first_resource]
 * [SimpleGraph#get_index get_index]
 * [SimpleGraph#get_label get_label]
 * [SimpleGraph#get_literal_triple_values get_literal_triple_values]
 * [SimpleGraph#get_prefix get_prefix]
 * [SimpleGraph#get_resource_triple_values get_resource_triple_values]
 * [SimpleGraph#get_subject_properties get_subject_properties]
 * [SimpleGraph#get_subject_property_values get_subject_property_values]
 * [SimpleGraph#get_subject_subgraph get_subject_subgraph]
 * [SimpleGraph#get_subjects get_subjects]
 * [SimpleGraph#get_subjects_of_type get_subjects_of_type]
 * [SimpleGraph#get_subjects_where get_subjects_where]
 * [SimpleGraph#get_subjects_where_literal get_subjects_where_literal]
 * [SimpleGraph#get_subjects_where_resource get_subjects_where_resource]
 * [SimpleGraph#get_triples get_triples]
 * [SimpleGraph#has_literal_triple has_literal_triple]
 * [SimpleGraph#has_resource_triple has_resource_triple]
 * [SimpleGraph#has_triples_about has_triples_about]
 * [SimpleGraph#is_empty is_empty]
 * [SimpleGraph#make_resource_array make_resource_array]
 * [SimpleGraph#merge merge]
 * [SimpleGraph#qname_to_uri qname_to_uri]
 * [SimpleGraph#reify reify]
 * [SimpleGraph#remove_all_triples remove_all_triples]
 * [SimpleGraph#remove_literal_triple remove_literal_triple]
 * [SimpleGraph#remove_property_values remove_property_values]
 * [SimpleGraph#remove_resource_triple remove_resource_triple]
 * [SimpleGraph#remove_triples_about remove_triples_about]
 * [SimpleGraph#replace_resource replace_resource]
 * [SimpleGraph#set_namespace_mapping set_namespace_mapping]
 * [SimpleGraph#subject_has_property subject_has_property]
 * [SimpleGraph#to_html to_html]
 * [SimpleGraph#to_json to_json]
 * [SimpleGraph#to_ntriples to_ntriples]
 * [SimpleGraph#to_rdfxml to_rdfxml]
 * [SimpleGraph#to_turtle to_turtle]
 * [SimpleGraph#update_prefix_mappings update_prefix_mappings]
 * [SimpleGraph#uri_to_qname uri_to_qname]
== Fields ==
 * [#a $a] - Serialise the graph to RDF/XML
 * [#after $after] - Serialise the graph to RDF/XML
 * [#before $before] - Serialise the graph to RDF/XML
 * [#subjectIndex $subjectIndex] - Serialise the graph to RDF/XML
= Constructor Detail =

== ChangeSet ==

{{{
public ChangeSet(mixed a)
}}}



= Method Detail =

== addT ==

{{{
public void addT(mixed s, mixed p, mixed o, mixed o_type)
}}}

addT
adds a triple to the internal simpleIndex holding all the changesets and statements<dl>
<dt>Author:</dt>
<dd>Keith</dd>
</dl>


== has_changes ==

{{{
public void has_changes()
}}}



== toRDFXML ==

{{{
public void toRDFXML()
}}}



== to_rdfxml ==

{{{
public string to_rdfxml()
}}}

Serialise the graph to RDF/XML<dl>
<dt>Returns:</dt>
<dd>the RDF/XML version of the graph</dd>
</dl>


= Field Detail =

== a ==

{{{
public mixed $a
}}}

Create a new changeset. This will calculate the required additions and removals based on before and after versions of a bounded description. The args parameter is an associative array that may have the following fields:
<ul>
  <li><em>subjectOfChange</em> => a string representing the URI of the changeset's subject of change</li>
  <li><em>createdDate</em> => a string representing the date of the changeset</li>
  <li><em>creatorName</em> => a string representing the creator of the changeset</li>
  <li><em>changeReason</em> => a string representing the reason for the changeset</li>
  <li><em>after</em> => an array of triples representing the required state of the resource description after the changeset would be applied. All subjects must be the same.</li>
  <li><em>before</em> => an array of triples representing the state of the resource description before the changeset is applied. All subjects must be the same.</li>
  <li><em>after_rdfxml</em> => a string of RDF/XML representing the required state of the resource description after the changeset would be applied. This is parsed and used to overwrite the 'after' parameter, if any. All subjects must be the same.</li>
  <li><em>before_rdfxml</em> => a string of RDF/XML representing the state of the resource description before the changeset is applied. This is parsed and used to overwrite the 'begin' parameter, if any. All subjects must be the same.</li>
</ul>
If none of 'after', 'before', 'after_rdfxml' or 'before_rdfxml' is supplied then an empty changeset is constructed. <br />
The 'after' and 'before' arrays are simple arrays where each element is a triple array with the following structure:
<ul>
  <li><em>s</em> => the subject URI</li>
  <li><em>p</em> => the predicate URI</li>
  <li><em>o</em> => the value of the object</li>
  <li><em>o_type</em> => one of 'uri', 'bnode' or 'literal'</li>
  <li><em>o_lang</em> => the language of the literal if any</li>
  <li><em>o_datatype</em> => the data type URI of the literal if any</li>
</ul>

== after ==

{{{
public mixed $after = array()
}}}



== before ==

{{{
public mixed $before = array()
}}}



== subjectIndex ==

{{{
public mixed $subjectIndex = array()
}}}





Generated by [http://phpdoctor.sourceforge.net/ PHPDoctor 2RC2]
